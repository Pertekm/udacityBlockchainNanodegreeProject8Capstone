// Use Verifier solidity contract that was generated by Zokrates
var Verifier = artifacts.require('Verifier');

// contents from proof.json generated from zokrates steps
const proof_correct = {
    "proof": {
        "a": ["0x05b62c4029dac767d41057126c2ead2688643d96f4451b055233ffba690dc13d", "0x07eb303f7d8d15c88b533981f2128a645f1ace5ac0117da8b32aa00e09072215"],
        "b": [["0x2a9d9f7fbaac94a016a7568ad0f67c35360f9559b78b87c89de23f77392526c9", "0x16b796969e29362e82a2e1938cade9a8606f5d76185fbd3be70bfdc29345b493"], ["0x0e4a60dca5c00980b5c4c066907f3694138ea101f707f31c428eceb11eed5954", "0x14311e58b11d8a4955632ca05787d54e5371a3b5546c87f8026d2d42faed5ef4"]],
        "c": ["0x0a2097acd736d7befb76001a45fce7614be059afc618cfdb23370ba64250055e", "0x1617cce74e400c00f2327dc163b3192867d75d6ca7490fe23c66e674f272d9ae"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000013", "0x0000000000000000000000000000000000000000000000000000000000000000"]
}

const proof_incorrect = {
    "proof": {
        "a": ["0x2ee52fb8db5d87668121686bce8b2c58f1a771330a3a0dbb344a233d0f281b6d", "0x1465b05a559d1dfbad3c94d5afa969f14a83c4adcbc2307e4d298eb2a709b503"],
        "b": [["0x2fcf3d0c753687bdadba4b68731621e01b30cc7544f12c84141ae251b4753e92", "0x0ebcaeea05ae818dc590a5b03f819d7554d566e364d57a4ca2d3e78e32addf1c"], ["0x089ab1e5f2b9a4f666d12a9951bfe6665b5c97f418325c70c2bdc4347c285abe", "0x22c5c1d5747ad09408b83b9b7507523494908e7af980d3426e819edfb23d9600"]],
        "c": ["0x1d13f748930d13807372ec6f7201bb43765692dfef8a4bd2052f2c36178ecaa9", "0x257ec47a0bcb339382150248ccea7d017bda83f73bdb39124337530ed1ff445a"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000008", "0x0000000000000000000000000000000000000000000000000000000000000000"]
}

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('Test verification', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});
        })

       it('with correct proof', async function () {         
            let verified =  await this.contract.verifyTx.call(
                proof_correct.proof.a,
                proof_correct.proof.b,
                proof_correct.proof.c,
                proof_correct.inputs
            ); 

            assert.isTrue(verified, "should verify");
        })
        
        it('with incorrect proof', async function () {        
             let verified =  await this.contract.verifyTx.call(
                proof_incorrect.proof.a,
                proof_incorrect.proof.b,
                proof_incorrect.proof.c,
                proof_incorrect.inputs
             ); 
 
             assert.isFalse(verified, "should not verify");
         })
    })
})

    
